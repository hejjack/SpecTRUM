data_args:
  show_raw_preds: True
  buffer_size: 100000 # for shuffling in dataloader
  data_seed: 42
  shuffle_train: True
  dataset_for_choosing_best_model: "NEIMS"  
  datasets: 
    NEIMS:
      train_path: "data/synth/neims_gen/train.jsonl"
      valid_path: "data/synth/neims_gen/valid.jsonl"
      weight: 1.0
      limit_train_split: null    # null for full; limit of head from train set chosen for training split
      limit_val_split: 10000     # null for full; limit of head from valid set chosen for validation split
      limit_example_split: 0     # null for full; limit of head chosen for visualized (generated) molecules
      source_token: "<neims>"
    RASSP:
      train_path: "data/synth/rassp_gen/train.jsonl"
      valid_path: "data/synth/rassp_gen/valid.jsonl"
      weight: 0.0                # do not use for training
      limit_train_split: 0       # null for full; limit of head from valid set chosen for validation split
      limit_val_split: 10000     # null for full; limit of head from valid set chosen for validation split
      limit_example_split: 100   # null for full; limit of head chosen for visualized (generated) molecules
      source_token: "<neims>"
    NIST: 
      train_path: "data/nist/train.jsonl"
      valid_path: "data/nist/valid.jsonl"
      weight: 0.0                # do not use for training
      limit_train_split: 0       # null for full; limit of head from valid set chosen for validation split
      limit_val_split: 10000     # null for full; limit of head from valid set chosen for validation split
      limit_example_split: 0     # null for full; limit of head chosen for visualized (generated) molecules
      source_token: "<neims>"    # rassp bcs it's a bit better (more similar to nist) than neims

preprocess_args: 
  lets_do_this: True             # if you want default args, this can be whatever (as long as preprocess_args is not empty or None)
  
model_args:
  tokenizer_path: "tokenizer/tokenizer_mf10M.model"
  decoder_seq_len: 200
  max_mz: 500                    # controls vocab size for encoder, if separate_encoder_decoder_embeds=True
  separate_encoder_decoder_embeds: True
  encoder_layers: 12
  encoder_ffn_dim: 4096
  encoder_attention_heads: 16
  decoder_layers: 12
  decoder_ffn_dim: 4096
  decoder_attention_heads: 16  


example_generation_args:
  "top_k": null
  "top_p": null
  "do_sample": True
  "num_beams": 5
  "temperature": null
  "penalty_alpha": null
  "num_return_sequences": 1  # NEVER TOUCH THIS
  "length_penalty": 1.0      # (use for beam search otherwise set to 0)  


hf_training_args:
  do_train: True
  do_eval: True

  max_steps: 112_010
  optim: "adamw_torch"
  warmup_steps: 1000

  learning_rate: 0.00005
  auto_bs: True
  bart_size: "base"           # "large" or "base"
  effective_train_batch_size: 128
  effective_eval_batch_size: 128

  dataloader_num_workers: 6
  dataloader_drop_last: False

  report_to: "wandb"
  remove_unused_columns: False # NEVER TOUCH THIS
  logging_steps: 10

  fp16: True
  seed: 42

  predict_with_generate: True # NEVER TOUCH THIS
  generation_num_beams: 1
  generation_max_length: 200
  evaluation_strategy: "steps"
  eval_steps: 8000 ### make it match 

  save_steps: 8000 ### make it match
  save_strategy: "steps"
  save_total_limit: 3 

  load_best_model_at_end: True
  metric_for_best_model: "eval_morgan_tanimoto_simil"
  greater_is_better: True

